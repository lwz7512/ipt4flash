/* AS3*Copyright 2008 noponies.*/package noponies.scrollingpanel.display{	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		import noponies.scrollingpanel.events.NpScrollingPanelEvent;	import noponies.scrollingpanel.pixelfumes.reflect.Reflect;	/**	* The NpScrollingPanelItem Class is a wrapper class for each content item within the NpScrollingPanel. Each thumbnail is given an ID, 	* which allows for a means of tracking what thumb has been clicked etc.	* @langversion ActionScript 3.0	* @Flash Player 9.0.28.0	* @author noponies - 2009	* @version 1.0	*/	/**	* @private	*/	public class NpScrollingPanelItem extends Sprite {		//--------------------------------------		// PRIVATE INSTANCE PROPERTIES		//--------------------------------------		private var _thumbID:int		private var _panelDirection:String		private var _thumb:DisplayObject		private var _deletedClipId:int		private var _panelReflect:Boolean				//--------------------------------------		// GETTERS / SETTERS		//--------------------------------------		/**		* @private		*/		public function get thumbWidth():int{			return this.width		}		/**		* @private		*/		public function get thumbHeight():int{			return this.height		}				/**		* @private		*/		public function set thumbReflection(thumbReflection:Boolean):void{			_panelReflect = thumbReflection		}		//--------------------------------------		// CONSTRUCTOR		//--------------------------------------				public function NpScrollingPanelItem(_thumb:DisplayObject, _thumbID:int, _panelDirection:String, _panelReflect:Boolean) {			this._thumbID = _thumbID;			this._panelDirection = _panelDirection;			this._panelReflect = _panelReflect						if(_panelReflect) {				var mc:MovieClip = new MovieClip()				mc.addChild(_thumb)				addChild(mc)				var r1:Reflect = new Reflect({mc:mc, alpha:50, ratio:25, distance:0, updateTime:-1, reflectionDropoff:.5});			}else{				addChild(_thumb)			}						addEventListener(Event.REMOVED_FROM_STAGE, handleRemovedFromStage);			addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);								}				//--------------------------------------		// HANDLE ADDED TO STAGE EVENT		//--------------------------------------				private function handleAddedToStage(event:Event):void{				removeEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);			 	addEventListener(MouseEvent.CLICK, handleClick);				addEventListener(MouseEvent.ROLL_OVER, handleRollOver);				addEventListener(MouseEvent.ROLL_OUT, handleRollOff);		}						//--------------------------------------		// NAV EVENT LISTENERS		//--------------------------------------		//handle a click on a thumb, dispatch an event indicating what thumb has been clicked on		private function handleClick(event:MouseEvent):void{			dispatchEvent(new NpScrollingPanelEvent(NpScrollingPanelEvent.CLICKED,true, true, _thumbID));		}				//handle a RollOver on a thumb, dispatch an event indicating what thumb has been rolled over		private function handleRollOver(event:MouseEvent):void{			dispatchEvent(new NpScrollingPanelEvent(NpScrollingPanelEvent.MOUSE_ON,true, true, _thumbID));		}				//handle a RollOff on a thumb, dispatch an event indicating what thumb has been rolled off		private function handleRollOff(event:MouseEvent):void{			dispatchEvent(new NpScrollingPanelEvent(NpScrollingPanelEvent.MOUSE_OFF,true, true, _thumbID));		}				//--------------------------------------		// ADJUST POSITION OF CLIP		//--------------------------------------		//this method shuffles each thumb within the thumbTrack. I				/**		* @private		*/		public function removeClip(id:int, pos:int):void{			_thumbID = id 			//set up the tween			var target:int			_panelDirection=="horizontal" ? target = x+pos : target = y+pos; 			doTween(target)		}						//--------------------------------------		// ADJUST PADDING OF CLIP		//--------------------------------------			/**		* @private		*/		public function adjustPadding(pad:int):void{			//only apply to clips that are not at position zero			var target:int			_panelDirection=="horizontal" ? target = x+pad*this._thumbID : target = y+pad*this._thumbID; 			doTween(target)		}				//--------------------------------------		// TWEENING METHOD		//--------------------------------------				private function doTween(target:int):void{			addEventListener(Event.ENTER_FRAME, tween)						function tween(event:Event):void{				if (_panelDirection=="horizontal") {					if(!_thumbID==0){						x+=Number(((target-x))*.2);					}				}else{					if(!_thumbID==0){						y+=Number(((target-y))*.2);					}				}				//dampen tween, so that it technically completes and set clip to final position				var n:Number = x - target;				if (n < 0)  n = -n;							if (n < .4) {					_panelDirection=="horizontal" ? x=target : y=target;					removeEventListener(Event.ENTER_FRAME, tween);					//this is to avoid clips getting positioned at negative positions when in column mode					var parentRef:Object = Object(parent.parent).accessThumb(_thumbID-1)					if(x<0){						y= parentRef.y						x= parentRef.x+parentRef.thumbWidth+Object(parent.parent).contentPadding					}					if(y<0){						x= parentRef.x						y= parentRef.y+parentRef.thumbHeight+Object(parent.parent).contentPadding					}				}			}							}				//--------------------------------------				// HANDLE REMOVED FROM STAGE EVENT		//---------------------------------------				private function handleRemovedFromStage(event:Event):void{			try {			removeEventListener(Event.REMOVED_FROM_STAGE, handleRemovedFromStage)			removeEventListener(MouseEvent.CLICK, handleClick)			removeEventListener(MouseEvent.ROLL_OVER, handleRollOver)			removeEventListener(MouseEvent.ROLL_OUT, handleRollOff)						} catch (e:Error) {				trace("There was an error when attempting to delete all NpScrollingPanelItem event listeners and content: "+Error);			}		}			}}